package com.micro.accounts.exception;

import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.HttpStatusCode;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.FieldError;
import org.springframework.validation.ObjectError;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.context.request.WebRequest;
import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;

import com.micro.accounts.dto.ErrorResponseDto;

@ControllerAdvice
public class GlobalExceptionHandler extends ResponseEntityExceptionHandler {
	
	
	
	
	
	@Override
	protected ResponseEntity<Object> handleMethodArgumentNotValid(MethodArgumentNotValidException ex,
			HttpHeaders headers, HttpStatusCode status, WebRequest request) {
			Map<String, String> validationErros = new HashMap<>();
			List<ObjectError> validationErrorList = ex.getBindingResult().getAllErrors();
			validationErrorList.forEach(error->{
				String fieldName = ((FieldError) error).getField();
				String validationMsg = error.getDefaultMessage();
				validationErros.put(fieldName, validationMsg);
			});
		return ResponseEntity<>(validationErros	,HttpStatus.BAD_REQUEST);
	}

	@ExceptionHandler(Exception.class)
	public ResponseEntity<ErrorResponseDto> handleGlobal(Exception ex,WebRequest webRequest){
			
		ErrorResponseDto erroDto = new ErrorResponseDto(webRequest.getDescription(false),
				HttpStatus.INTERNAL_SERVER_ERROR,ex.getMessage(),LocalDateTime.now());
		

		return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(erroDto);
	}
	
	@ExceptionHandler(ResourceNotFoundException.class)
	public ResponseEntity<ErrorResponseDto> handleResourceNotFoundException(ResourceNotFoundException ex,WebRequest webRequest){
			
		ErrorResponseDto erroDto = new ErrorResponseDto(webRequest.getDescription(false),
				HttpStatus.NOT_FOUND,ex.getMessage(),LocalDateTime.now());
		

		return ResponseEntity.status(HttpStatus.NOT_FOUND).body(erroDto);
	}
	
	@ExceptionHandler(CustomerAlreadyExistsException.class)
	public ResponseEntity<ErrorResponseDto> handleCustomerAlreadyExistsException(CustomerAlreadyExistsException ex,WebRequest webRequest){
			
		ErrorResponseDto erroDto = new ErrorResponseDto(webRequest.getDescription(false),
				HttpStatus.BAD_REQUEST,ex.getMessage(),LocalDateTime.now());
		

		return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(erroDto);
	}
	
	
	

}
